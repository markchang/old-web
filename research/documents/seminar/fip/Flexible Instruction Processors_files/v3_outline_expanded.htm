<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File
href="../Flexible%20Instruction%20Processors.htm">
<link rel=Preview href=preview.wmf>

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../Flexible%20Instruction%20Processors.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=black text=white link=white vlink=white alink=white>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0001.htm');">Flexible Instruction
Processors</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Wayne Luk &amp; Peter Y.K. Cheung</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Imperial College</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>CASES 2000</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0002.htm');">“Not So General” Purpose
Processors</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>GPPs lose performance when dealing with
  non-standard operations and data</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Particularly apparent in embedded
  systems</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Cell phones</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Medical appliances</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Digital cameras</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>PDAs</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0003.htm');">Two roads to
customization</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Augment GPPs with programmable logic</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Couple standard processor (ARM, MIPS)
  with an FPGA fabric</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Fixed processor instruction set</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>FPGA implements custom instructions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Implement them in FPGAs</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Customize instructions at compile time
  or at run time</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0004.htm');">Flexible Instruction
Processors</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>FIPs are assembled by parameterized
  processor templates</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Allows customized hardware to be
  exposed as new instructions</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Critical resources can be adjusted
  according to domain requirements</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Can implement same instruction set with
  different design tradeoffs</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0005.htm');">FIPs Template</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Templates are modules connected
  together by communicating channels</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Can instantiate different styles of
  processors</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Stack, register, etc.</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Customizations</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Removal of resources</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Changing data widths</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Vary degree of pipelining</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Implemented in Handel-C</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0006.htm');">Enhancing Processor
Templates</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Can group modules differently to
  achieve different processor styles</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Superscalar</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>More than one execution module</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Hybrid</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Different execution modules
  (stack/register)</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0007.htm');">Compilation Strategy</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Optimizes known target code to known
  target FIP</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Reorganizes code to take advantage of
  ILP</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Similar to Java’s Just-In-Time
  compilation</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0008.htm');">Compilation Strategy</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Annotate source code with profile
  information</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Frequency of instruction use</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Common instruction groups</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Shared resources</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Use annotations to drive optimization
  of code and FIP</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Compile with a FIP-specific compiler</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0009.htm');">FIP Optimizations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Custom instructions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Direct hardware implementations can be
  exposed by custom instructions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Reduces number of fetch-decode
  instructions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Increases area</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Processor-specific</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Can replicate much-used resources</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>JVM: allow concurrent reads of top of
  stack</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>JVM: allow reads of top ‘n’ elements</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0010.htm');">Implementation: JVM</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=3><font face=Arial size=2>Implemented FIP-based Java Virtual
  Machine</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>#1: segregated resources that are
  shared</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Good area utilization and the expense
  of routing congestion</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>#2: two-stage pipeline &amp; only
  shares stack and main memory</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=2><font face=Arial size=2>#3: deeper pipelines for certain
  instructions and ‘register’ style improvements</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Top-of-stack registers are replicated –
  writes are done back to stack directly, replicated registers updated during
  the fetch cycle</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Most instructions have 4 stages, some
  5-6 stages</font></td>
 </tr>
 <tr>
  <td colspan=3></td>
  <td colspan=1><font face=Arial size=2>Routing is pipelined</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0011.htm');">Results</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0012.htm');">Results</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0013.htm');">Impact of custom
instructions</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Link list insertion (100 links)</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Direct hardware: 2.3ms</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>FIP-JVM: 6.4ms, 22 instructions</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>ASIC: 1ms</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Adding ‘insert link’ instruction</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>12 cycles to complete</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Saves 10 cycles and 10 fetch/decodes</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0014.htm');">Implementation: AES</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0015.htm');">Optimizations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Opcode chaining</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Store intermediate results in temporary
  registers</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Removes push/pop and alleviates
  sequential nature of stack-based machines</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Galois Multiplication is single
  instruction</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>No procedure call overhead</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>8.5 cycles instead of 30</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Introduce predicate registers to allow
  instructions to execute in parallel</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>6 cycles instead of 30</font></td>
 </tr>
</table>

</p>

</body>

</html>
